{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8e6cbda2cc90c05a0c02","webpack:///./src/index.js"],"names":["cowsay","strings","values","raw","reduce","acc","val","i","lineArr","split","maxLineLength","Math","max","map","v","length","text","l","getBoundChar","bound","numLines","index","boundChar","startChar","endChar","repeat","startLine","endLine","cow","concat","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;;;;mBAEwBA,M;;;;AAAT,UAASA,MAAT,CAAgBC,OAAhB,EAAoC;AAAA,uCAARC,MAAQ;AAARA,eAAQ;AAAA;;AAC/C,SAAMC,MAAMF,QAAQG,MAAR,CAAe,UAACC,GAAD,EAAMC,GAAN,EAAWC,CAAX,EAAiB;AACxCF,gBAAOC,GAAP;AACA,aAAIJ,OAAOK,CAAP,CAAJ,EAAe;AACXF,oBAAOH,OAAOK,CAAP,CAAP;AACH;;AAED,gBAAOF,GAAP;AACH,MAPW,EAOT,EAPS,CAAZ;;AASA,SAAMG,UAAUL,IAAIM,KAAJ,CAAU,IAAV,CAAhB;;AAEA,SAAMC,gBAAgBC,KAAKC,GAAL,gCAAYJ,QAAQK,GAAR,CAAY;AAAA,gBAAKC,EAAEC,MAAP;AAAA,MAAZ,CAAZ,EAAtB;;AAEA,SAAMC,OAAOR,QAAQK,GAAR,CAAY,UAACI,CAAD,EAAIV,CAAJ,EAAU;AAC/B,kBAASW,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,KAAvC,EAA8C;AAC1C,iBAAIC,kBAAJ;;AAEA,iBAAIF,aAAa,CAAjB,EAAoB;AAChBE,6BAAaH,UAAU,OAAX,GAAsB,GAAtB,GAA4B,GAAxC;AACH,cAFD,MAEO;AACH,qBAAIE,UAAU,CAAd,EAAiB;AACbC,iCAAaH,UAAU,OAAX,GAAsB,GAAtB,GAA4B,IAAxC;AACH,kBAFD,MAEO,IAAIC,WAAW,CAAX,KAAiBC,KAArB,EAA4B;AAC/BC,iCAAaH,UAAU,OAAX,GAAsB,IAAtB,GAA6B,GAAzC;AACH,kBAFM,MAEA;AACHG,iCAAY,GAAZ;AACH;AACJ;;AAED,oBAAOA,SAAP;AACH;;AAED,aAAMC,YAAYL,aAAa,OAAb,EAAsBV,QAAQO,MAA9B,EAAsCR,CAAtC,CAAlB;AACA,aAAMiB,UAAUN,aAAa,KAAb,EAAoBV,QAAQO,MAA5B,EAAoCR,CAApC,CAAhB;;AAEA,gBAAUgB,SAAV,SAAuBN,CAAvB,GAA2B,IACtBQ,MADsB,CACff,gBAAgBO,EAAEF,MADH,CAA3B,SACyCS,OADzC;AAEH,MAxBY,CAAb;;AA0BA,SAAME,kBAAgB,IAAID,MAAJ,CAAWf,gBAAgB,CAA3B,CAAtB;AACA,SAAMiB,gBAAc,IAAIF,MAAJ,CAAWf,gBAAgB,CAA3B,CAApB;;AAEA,SAAMkB,kHAAN;;AAMA,YAAO,GACFC,MADE,CACKH,SADL,EAEFG,MAFE,CAEKb,IAFL,EAGFa,MAHE,CAGKF,OAHL,EAIFE,MAJE,CAIKD,GAJL,EAKFE,IALE,CAKG,IALH,CAAP;AAMH","file":"cowsay-tag.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cowsay-tag\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cowsay-tag\"] = factory();\n\telse\n\t\troot[\"cowsay-tag\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8e6cbda2cc90c05a0c02\n **/","'use strict';\n\nexport default function cowsay(strings, ...values) {\n    const raw = strings.reduce((acc, val, i) => {\n        acc += val;\n        if (values[i]) {\n            acc += values[i];\n        }\n\n        return acc;\n    }, '');\n\n    const lineArr = raw.split('\\n');\n\n    const maxLineLength = Math.max(...lineArr.map(v => v.length));\n\n    const text = lineArr.map((l, i) => {\n        function getBoundChar(bound, numLines, index) {\n            let boundChar;\n\n            if (numLines === 1) {\n                boundChar = (bound === 'start') ? '<' : '>';\n            } else {\n                if (index === 0) {\n                    boundChar = (bound === 'start') ? '/' : '\\\\';\n                } else if (numLines - 1 === index) {\n                    boundChar = (bound === 'start') ? '\\\\' : '/';\n                } else {\n                    boundChar = '|';\n                }\n            }\n\n            return boundChar;\n        }\n\n        const startChar = getBoundChar('start', lineArr.length, i);\n        const endChar = getBoundChar('end', lineArr.length, i);\n\n        return `${startChar} ${l}${' '\n            .repeat(maxLineLength - l.length)} ${endChar}`;\n    });\n\n    const startLine = ` ${'_'.repeat(maxLineLength + 2)}`;\n    const endLine = ` ${'-'.repeat(maxLineLength + 2)}`;\n\n    const cow = `    \\\\   ^__^\n     \\\\  (oo)\\_______\n        (__)\\       )\\/\\\\\n            ||----w |\n            ||     ||`;\n\n    return []\n        .concat(startLine)\n        .concat(text)\n        .concat(endLine)\n        .concat(cow)\n        .join('\\n');\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/"],"sourceRoot":""}